# frozen_string_literal: true

require 'rails_helper'
require 'pry-rails'
# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
module RocketAdmin
  RSpec.describe '/users', type: :request do
    let(:user) { create(:user) }
    let(:valid_attributes) do
      { email: 'test@test.com', password: '123456', password_confirmation: '123456' }
    end

    let(:invalid_attributes) do
      { email: 'test.com', password: '123', password_confirmation: '123456' }
    end

    before(:each) do
      sign_in user
    end

    describe 'GET /index' do
      it 'renders a successful response' do
        get '/admin/users'
        expect(response).to be_successful
      end
    end
    #
    # describe 'GET /show' do
    #  it 'renders a successful response' do
    #    category = Rocket::User.create! valid_attributes
    #    get category_url(category)
    #    expect(response).to be_successful
    #  end
    # end
    #
    describe 'GET /new' do
      it 'renders a successful response' do
        get rocket_admin.new_user_path
        expect(response).to be_successful
      end
    end

    describe 'GET /edit' do
      it 'render a successful response' do
        user = User.create! valid_attributes
        get rocket_admin.edit_user_path(user)
        expect(response).to be_successful
      end
    end

    describe 'POST /create' do
      context 'with valid parameters' do
        it 'creates a new User' do
          expect do
            post rocket_admin.users_path, params: { user: valid_attributes }
          end.to change(User, :count).by(1)
        end

        it 'redirects to the created user' do
          post rocket_admin.users_path, params: { user: valid_attributes }
          expect(response).to redirect_to(rocket_admin.user_path(User.last))
        end
      end

      context 'with invalid parameters' do
        it 'does not create a new User' do
          expect do
            post rocket_admin.users_path, params: { user: invalid_attributes }
          end.to change(User, :count).by(0)
        end

        it "renders a successful response (i.e. to display the 'new' template)" do
          post rocket_admin.users_path, params: { user: invalid_attributes }
          expect(response).to be_successful
        end
      end
    end

    describe 'PATCH /update' do
      context 'with valid parameters' do
        let(:new_attributes) do
          { email: 'new@mail.com' }
        end

        it 'updates the requested user send email confirmation' do
          user1 = User.create! valid_attributes
          patch rocket_admin.user_path(user1), params: { user: new_attributes }
          expect(ActionMailer::Base.deliveries.last.to[0]).to eq(new_attributes[:email])
        end

        it 'redirects to the user' do
          user_edit = User.create! valid_attributes
          patch rocket_admin.user_path(user_edit), params: { user: new_attributes }
          user_edit.reload
          expect(response).to redirect_to(rocket_admin.user_path(user_edit))
        end
      end

      context 'with invalid parameters' do
        it "renders a successful response (i.e. to display the 'edit' template)" do
          user_edit = User.create! valid_attributes
          patch rocket_admin.user_path(user_edit), params: { user: invalid_attributes }
          expect(response).to render_template(:edit)
        end
      end
    end

    describe 'GET /delete' do
      it 'renders a successful response' do
        get "/admin/users/#{user.id}/delete", xhr: true
        expect(response).to be_successful
      end
    end

    describe 'DELETE /destroy' do
      it 'destroys the requested user' do
        user = User.create! valid_attributes
        expect do
          delete rocket_admin.user_path(user)
        end.to change(User, :count).by(-1)
      end

      it 'redirects to the users list' do
        user = User.create! valid_attributes
        delete rocket_admin.user_path(user)
        expect(response).to redirect_to(rocket_admin.users_path)
      end
    end
  end
end
